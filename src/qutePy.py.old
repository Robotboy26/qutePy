import os
import time

# get from bash init sometime
userscriptPath = os.path.expanduser("~/.local/share/qutebrowser/userscripts")
lastCommandTime = 0
modes = ["normal"]
keybinds = {}

def init():
    # load keymap
    keymap = []
    readlines = open(f"{userscriptPath}/keymap.txt", 'r').read().splitlines()
    for x, line in range(len(readlines)), readlines:
        keymap.append(line.split("||")

    print(keymap)
    readlines = open(os.path.expanduser("~/qutePy/data.txt"), 'r').read().splitlines()
    QUTE_FIFO = os.path.expanduser(readlines[0])
    return QUTE_FIFO

QUTE_FIFO = init()

def writeCommand(*arguments, QUTE_FIFO=QUTE_FIFO): # need to make this faster!!!
    # this is magic or somthing but it works with the print statment in there mabey it was still too fast??
    global lastCommandTime
    # not needed!?!
    # if time.time() - lastCommandTime < 4:
    #     time.sleep(1e-08)
    #     print("slept")
    # lastCommandTime = time.time()
    print(f"Time taken: {time.time() - lastCommandTime}")
    total = []
    for arg in arguments:
        total.append(arg)
    with open(QUTE_FIFO, 'a') as F:
        command = " ".join(total)
        print(command)
        F.write(f"{command}\n")
        F.close()

def message(string, type="info"):
    if type.lower() == "info":
        writeCommand("message-info", f'"{string}"')
    if type.lower() == "error":
        writeCommand("message-error", f'"{string}"')
    if type.lower() == "warning":
        writeCommand("message-warning", f'"{string}"')

def bind(key, effect):
    writeCommand(f"bind {key} {effect}")

def unbind(key):
    writeCommand(f"unbind {key}")

# need to change the keybinds
def loadNormalMode():
# Bindings for normal mode (hopefully I can change this to get latest from the config.py or even a better way but for now
# move out to a file at some point with all the binds to keep a history as well
    bind("'", 'mode-enter jump_mark')
    bind('+', 'zoom-in')
    bind('-', 'zoom-out')
    bind('.', 'repeat-command')
    bind('/', 'set-cmd-text /')
    bind(':', 'set-cmd-text :')
    bind(';I', 'hint images tab')
    bind(';O', 'hint links fill :open -t -r {hint-url}')
    bind(';R', 'hint --rapid links window')
    bind(';Y', 'hint links yank-primary')
    bind(';b', 'hint all tab-bg')
    bind(';d', 'hint links download')
    bind(';f', 'hint all tab-fg')
    bind(';h', 'hint all hover')
    bind(';i', 'hint images')
    bind(';o', 'hint links fill :open {hint-url}')
    bind(';r', 'hint --rapid links tab-bg')
    bind(';t', 'hint inputs')
    bind(';y', 'hint links yank')
    bind('<Alt-1>', 'tab-focus 1')
    bind('<Alt-2>', 'tab-focus 2')
    bind('<Alt-3>', 'tab-focus 3')
    bind('<Alt-4>', 'tab-focus 4')
    bind('<Alt-5>', 'tab-focus 5')
    bind('<Alt-6>', 'tab-focus 6')
    bind('<Alt-7>', 'tab-focus 7')
    bind('<Alt-8>', 'tab-focus 8')
    bind('<Alt-9>', 'tab-focus -1')
    bind('<Alt-m>', 'tab-mute')
    bind('<Ctrl-A>', 'navigate increment')
    bind('<Ctrl-Alt-p>', 'print')
    bind('<Ctrl-B>', 'scroll-page 0 -1')
    bind('<Ctrl-D>', 'scroll-page 0 0.5')
    bind('<Ctrl-F5>', 'reload -f')
    bind('<Ctrl-F>', 'scroll-page 0 1')
    bind('<Ctrl-N>', 'open -w')
    bind('<Ctrl-PgDown>', 'tab-next')
    bind('<Ctrl-PgUp>', 'tab-prev')
    bind('<Ctrl-Q>', 'quit')
    bind('<Ctrl-Return>', 'selection-follow -t')
    bind('<Ctrl-Shift-N>', 'open -p')
    bind('<Ctrl-Shift-T>', 'undo')
    bind('<Ctrl-Shift-Tab>', 'nop')
    bind('<Ctrl-Shift-W>', 'close')
    bind('<Ctrl-T>', 'open -t')
    bind('<Ctrl-Tab>', 'tab-focus last')
    bind('<Ctrl-U>', 'scroll-page 0 -0.5')
    bind('<Ctrl-V>', 'mode-enter passthrough')
    bind('<Ctrl-W>', 'tab-close')
    bind('<Ctrl-X>', 'navigate decrement')
    bind('<Ctrl-^>', 'tab-focus last')
    bind('<Ctrl-h>', 'home')
    bind('<Ctrl-p>', 'tab-pin')
    bind('<Ctrl-s>', 'stop')
    bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave')
    bind('<F11>', 'fullscreen')
    bind('<F5>', 'reload')
    bind('<Return>', 'selection-follow')
    bind('<back>', 'back')
    bind('<forward>', 'forward')
    bind('=', 'zoom')
    bind('?', 'set-cmd-text ?')
    bind('@', 'macro-run')
    bind('B', 'set-cmd-text -s :quickmark-load -t')
    bind('D', 'tab-close -o')
    bind('F', 'hint all tab')
    bind('G', 'scroll-to-perc')
    bind('H', 'back')
    bind('J', 'tab-next')
    bind('K', 'tab-prev')
    bind('L', 'forward')
    bind('M', 'bookmark-add')
    bind('N', 'search-prev')
    bind('O', 'set-cmd-text -s :open -t')
    bind('PP', 'open -t -- {primary}')
    bind('Pp', 'open -t -- {clipboard}')
    bind('R', 'reload -f')
    bind('Sb', 'bookmark-list --jump')
    bind('Sh', 'history')
    bind('Sq', 'bookmark-list')
    bind('Ss', 'set')
    bind('T', 'set-cmd-text -sr :tab-focus')
    bind('U', 'undo -w')
    bind('V', 'mode-enter caret ;; selection-toggle --line')
    bind('ZQ', 'quit')
    bind('ZZ', 'quit --save')
    bind('[[', 'navigate prev')
    bind(']]', 'navigate next')
    bind('`', 'mode-enter set_mark')
    bind('ad', 'download-cancel')
    bind('b', 'set-cmd-text -s :quickmark-load')
    bind('cd', 'download-clear')
    bind('co', 'tab-only')
    bind('d', 'tab-close')
    bind('f', 'hint')
    bind('g$', 'tab-focus -1')
    bind('g0', 'tab-focus 1')
    bind('gB', 'set-cmd-text -s :bookmark-load -t')
    bind('gC', 'tab-clone')
    bind('gD', 'tab-give')
    bind('gJ', 'tab-move +')
    bind('gK', 'tab-move -')
    bind('gO', 'set-cmd-text :open -t -r {url:pretty}')
    bind('gU', 'navigate up -t')
    bind('g^', 'tab-focus 1')
    bind('ga', 'open -t')
    bind('gb', 'set-cmd-text -s :bookmark-load')
    bind('gd', 'download')
    bind('gf', 'view-source')
    bind('gg', 'scroll-to-perc 0')
    bind('gi', 'hint inputs --first')
    bind('gm', 'tab-move')
    bind('go', 'set-cmd-text :open {url:pretty}')
    bind('gt', 'set-cmd-text -s :tab-select')
    bind('gu', 'navigate up')
    bind('h', 'scroll left')
    bind('j', 'scroll down')
    bind('k', 'scroll up')
    bind('l', 'scroll right')
    bind('m', 'quickmark-save')
    bind('n', 'search-next')
    bind('o', 'set-cmd-text -s :open')
    bind('pP', 'open -- {primary}')
    bind('pp', 'open -- {clipboard}')
    bind('q', 'macro-record')
    bind('r', 'reload')
    bind('sf', 'save')
    bind('sk', 'set-cmd-text -s :bind')
    bind('sl', 'set-cmd-text -s :set -t')
    bind('ss', 'set-cmd-text -s :set')
    bind('tCH', '-cycle -p -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tCh', '-cycle -p -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tCu', '-cycle -p -u {url} content.cookies.accept all no-3rdparty never ;; reload')
    bind('tIH', '-cycle -p -u *://*.{url:host}/* content.images ;; reload')
    bind('tIh', '-cycle -p -u *://{url:host}/* content.images ;; reload')
    bind('tIu', '-cycle -p -u {url} content.images ;; reload')
    bind('tPH', '-cycle -p -u *://*.{url:host}/* content.plugins ;; reload')
    bind('tPh', '-cycle -p -u *://{url:host}/* content.plugins ;; reload')
    bind('tPu', '-cycle -p -u {url} content.plugins ;; reload')
    bind('tSH', '-cycle -p -u *://*.{url:host}/* content.javascript.enabled ;; reload')
    bind('tSh', '-cycle -p -u *://{url:host}/* content.javascript.enabled ;; reload')
    bind('tSu', '-cycle -p -u {url} content.javascript.enabled ;; reload')
    bind('tcH', '-cycle -p -t -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tch', '-cycle -p -t -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tcu', '-cycle -p -t -u {url} content.cookies.accept all no-3rdparty never ;; reload')
    bind('th', 'back -t')
    bind('tiH', '-cycle -p -t -u *://*.{url:host}/* content.images ;; reload')
    bind('tih', '-cycle -p -t -u *://{url:host}/* content.images ;; reload')
    bind('tiu', '-cycle -p -t -u {url} content.images ;; reload')
    bind('tl', 'forward -t')
    bind('tpH', '-cycle -p -t -u *://*.{url:host}/* content.plugins ;; reload')
    bind('tph', '-cycle -p -t -u *://{url:host}/* content.plugins ;; reload')
    bind('tpu', '-cycle -p -t -u {url} content.plugins ;; reload')
    bind('tsH', '-cycle -p -t -u *://*.{url:host}/* content.javascript.enabled ;; reload')
    bind('tsh', '-cycle -p -t -u *://{url:host}/* content.javascript.enabled ;; reload')
    bind('tsu', '-cycle -p -t -u {url} content.javascript.enabled ;; reload')
    bind('u', 'undo')
    bind('v', 'mode-enter caret')
    bind('wB', 'set-cmd-text -s :bookmark-load -w')
    bind('wIf', 'devtools-focus')
    bind('wIh', 'devtools left')
    bind('wIj', 'devtools bottom')
    bind('wIk', 'devtools top')
    bind('wIl', 'devtools right')
    bind('wIw', 'devtools window')
    bind('wO', 'set-cmd-text :open -w {url:pretty}')
    bind('wP', 'open -w -- {primary}')
    bind('wb', 'set-cmd-text -s :quickmark-load -w')
    bind('wf', 'hint all window')
    bind('wh', 'back -w')
    bind('wi', 'devtools')
    bind('wl', 'forward -w')
    bind('wo', 'set-cmd-text -s :open -w')
    bind('wp', 'open -w -- {clipboard}')
    bind('xO', 'set-cmd-text :open -b -r {url:pretty}')
    bind('xo', 'set-cmd-text -s :open -b')
    bind('yD', 'yank domain -s')
    bind('yM', 'yank inline [{title}]({url}) -s')
    bind('yP', 'yank pretty-url -s')
    bind('yT', 'yank title -s')
    bind('yY', 'yank -s')
    bind('yd', 'yank domain')
    bind('ym', 'yank inline [{title}]({url})')
    bind('yp', 'yank pretty-url')
    bind('yt', 'yank title')
    bind('yy', 'yank')
    bind('{{', 'navigate prev -t')
    bind('}}', 'navigate next -t')

def loadGoogleDocsMode():
    bind("'", 'mode-enter jump_mark')
    bind('+', 'zoom-in')
    bind('-', 'zoom-out')
    bind('.', 'repeat-command')
    bind('/', 'set-cmd-text /')
    bind(':', 'set-cmd-text :')
    bind(';I', 'hint images tab')
    bind(';O', 'hint links fill :open -t -r {hint-url}')
    bind(';R', 'hint --rapid links window')
    bind(';Y', 'hint links yank-primary')
    bind(';b', 'hint all tab-bg')
    bind(';d', 'hint links download')
    bind(';f', 'hint all tab-fg')
    bind(';h', 'hint all hover')
    bind(';i', 'hint images')
    bind(';o', 'hint links fill :open {hint-url}')
    bind(';r', 'hint --rapid links tab-bg')
    bind(';t', 'hint inputs')
    bind(';y', 'hint links yank')
    bind('<Alt-1>', 'tab-focus 1')
    bind('<Alt-2>', 'tab-focus 2')
    bind('<Alt-3>', 'tab-focus 3')
    bind('<Alt-4>', 'tab-focus 4')
    bind('<Alt-5>', 'tab-focus 5')
    bind('<Alt-6>', 'tab-focus 6')
    bind('<Alt-7>', 'tab-focus 7')
    bind('<Alt-8>', 'tab-focus 8')
    bind('<Alt-9>', 'tab-focus -1')
    bind('<Alt-m>', 'tab-mute')
    bind('<Ctrl-A>', 'navigate increment')
    bind('<Ctrl-Alt-p>', 'print')
    bind('<Ctrl-B>', 'scroll-page 0 -1')
    bind('<Ctrl-D>', 'scroll-page 0 0.5')
    bind('<Ctrl-F5>', 'reload -f')
    bind('<Ctrl-F>', 'scroll-page 0 1')
    bind('<Ctrl-N>', 'open -w')
    bind('<Ctrl-PgDown>', 'tab-next')
    bind('<Ctrl-PgUp>', 'tab-prev')
    bind('<Ctrl-Q>', 'quit')
    bind('<Ctrl-Return>', 'selection-follow -t')
    bind('<Ctrl-Shift-N>', 'open -p')
    bind('<Ctrl-Shift-T>', 'undo')
    bind('<Ctrl-Shift-Tab>', 'nop')
    bind('<Ctrl-Shift-W>', 'close')
    bind('<Ctrl-T>', 'open -t')
    bind('<Ctrl-Tab>', 'tab-focus last')
    bind('<Ctrl-U>', 'scroll-page 0 -0.5')
    bind('<Ctrl-V>', 'mode-enter passthrough')
    bind('<Ctrl-W>', 'tab-close')
    bind('<Ctrl-X>', 'navigate decrement')
    bind('<Ctrl-^>', 'tab-focus last')
    bind('<Ctrl-h>', 'home')
    bind('<Ctrl-p>', 'tab-pin')
    bind('<Ctrl-s>', 'stop')
    bind('<Escape>', 'clear-keychain ;; search ;; fullscreen --leave')
    bind('<F11>', 'fullscreen')
    bind('<F5>', 'reload')
    bind('<Return>', 'selection-follow')
    bind('<back>', 'back')
    bind('<forward>', 'forward')
    bind('=', 'zoom')
    bind('?', 'set-cmd-text ?')
    bind('@', 'macro-run')
    bind('B', 'set-cmd-text -s :quickmark-load -t')
    bind('D', 'tab-close -o')
    bind('F', 'hint all tab')
    bind('G', 'scroll-to-perc')
    bind('H', 'back')
    bind('J', 'tab-next')
    bind('K', 'tab-prev')
    bind('L', 'forward')
    bind('M', 'bookmark-add')
    bind('N', 'search-prev')
    bind('O', 'set-cmd-text -s :open -t')
    bind('PP', 'open -t -- {primary}')
    bind('Pp', 'open -t -- {clipboard}')
    bind('R', 'reload -f')
    bind('Sb', 'bookmark-list --jump')
    bind('Sh', 'history')
    bind('Sq', 'bookmark-list')
    bind('Ss', 'set')
    bind('T', 'set-cmd-text -sr :tab-focus')
    bind('U', 'undo -w')
    bind('V', 'mode-enter caret ;; selection-toggle --line')
    bind('ZQ', 'quit')
    bind('ZZ', 'quit --save')
    bind('[[', 'navigate prev')
    bind(']]', 'navigate next')
    bind('`', 'mode-enter set_mark')
    bind('ad', 'download-cancel')
    bind('b', 'set-cmd-text -s :quickmark-load')
    bind('cd', 'download-clear')
    bind('co', 'tab-only')
    bind('d', 'tab-close')
    bind('f', 'hint')
    bind('g$', 'tab-focus -1')
    bind('g0', 'tab-focus 1')
    bind('gB', 'set-cmd-text -s :bookmark-load -t')
    bind('gC', 'tab-clone')
    bind('gD', 'tab-give')
    bind('gJ', 'tab-move +')
    bind('gK', 'tab-move -')
    bind('gO', 'set-cmd-text :open -t -r {url:pretty}')
    bind('gU', 'navigate up -t')
    bind('g^', 'tab-focus 1')
    bind('ga', 'open -t')
    bind('gb', 'set-cmd-text -s :bookmark-load')
    bind('gd', 'download')
    bind('gf', 'view-source')
    bind('gg', 'scroll-to-perc 0')
    bind('gi', 'hint inputs --first')
    bind('gm', 'tab-move')
    bind('go', 'set-cmd-text :open {url:pretty}')
    bind('gt', 'set-cmd-text -s :tab-select')
    bind('gu', 'navigate up')
    bind('h', 'scroll left')
    bind('j', 'scroll down')
    bind('k', 'scroll up')
    bind('l', 'scroll right')
    bind('m', 'quickmark-save')
    bind('n', 'search-next')
    bind('o', 'set-cmd-text -s :open')
    bind('pP', 'open -- {primary}')
    bind('pp', 'open -- {clipboard}')
    bind('q', 'macro-record')
    bind('r', 'reload')
    bind('sf', 'save')
    bind('sk', 'set-cmd-text -s :bind')
    bind('sl', 'set-cmd-text -s :set -t')
    bind('ss', 'set-cmd-text -s :set')
    bind('tCH', '-cycle -p -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tCh', '-cycle -p -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tCu', '-cycle -p -u {url} content.cookies.accept all no-3rdparty never ;; reload')
    bind('tIH', '-cycle -p -u *://*.{url:host}/* content.images ;; reload')
    bind('tIh', '-cycle -p -u *://{url:host}/* content.images ;; reload')
    bind('tIu', '-cycle -p -u {url} content.images ;; reload')
    bind('tPH', '-cycle -p -u *://*.{url:host}/* content.plugins ;; reload')
    bind('tPh', '-cycle -p -u *://{url:host}/* content.plugins ;; reload')
    bind('tPu', '-cycle -p -u {url} content.plugins ;; reload')
    bind('tSH', '-cycle -p -u *://*.{url:host}/* content.javascript.enabled ;; reload')
    bind('tSh', '-cycle -p -u *://{url:host}/* content.javascript.enabled ;; reload')
    bind('tSu', '-cycle -p -u {url} content.javascript.enabled ;; reload')
    bind('tcH', '-cycle -p -t -u *://*.{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tch', '-cycle -p -t -u *://{url:host}/* content.cookies.accept all no-3rdparty never ;; reload')
    bind('tcu', '-cycle -p -t -u {url} content.cookies.accept all no-3rdparty never ;; reload')
    bind('th', 'back -t')
    bind('tiH', '-cycle -p -t -u *://*.{url:host}/* content.images ;; reload')
    bind('tih', '-cycle -p -t -u *://{url:host}/* content.images ;; reload')
    bind('tiu', '-cycle -p -t -u {url} content.images ;; reload')
    bind('tl', 'forward -t')
    bind('tpH', '-cycle -p -t -u *://*.{url:host}/* content.plugins ;; reload')
    bind('tph', '-cycle -p -t -u *://{url:host}/* content.plugins ;; reload')
    bind('tpu', '-cycle -p -t -u {url} content.plugins ;; reload')
    bind('tsH', '-cycle -p -t -u *://*.{url:host}/* content.javascript.enabled ;; reload')
    bind('tsh', '-cycle -p -t -u *://{url:host}/* content.javascript.enabled ;; reload')
    bind('tsu', '-cycle -p -t -u {url} content.javascript.enabled ;; reload')
    bind('u', 'undo')
    bind('v', 'mode-enter caret')
    bind('wB', 'set-cmd-text -s :bookmark-load -w')
    bind('wIf', 'devtools-focus')
    bind('wIh', 'devtools left')
    bind('wIj', 'devtools bottom')
    bind('wIk', 'devtools top')
    bind('wIl', 'devtools right')
    bind('wIw', 'devtools window')
    bind('wO', 'set-cmd-text :open -w {url:pretty}')
    bind('wP', 'open -w -- {primary}')
    bind('wb', 'set-cmd-text -s :quickmark-load -w')
    bind('wf', 'hint all window')
    bind('wh', 'back -w')
    bind('wi', 'devtools')
    bind('wl', 'forward -w')
    bind('wo', 'set-cmd-text -s :open -w')
    bind('wp', 'open -w -- {clipboard}')
    bind('xO', 'set-cmd-text :open -b -r {url:pretty}')
    bind('xo', 'set-cmd-text -s :open -b')
    bind('yD', 'yank domain -s')
    bind('yM', 'yank inline [{title}]({url}) -s')
    bind('yP', 'yank pretty-url -s')
    bind('yT', 'yank title -s')
    bind('yY', 'yank -s')
    bind('yd', 'yank domain')
    bind('ym', 'yank inline [{title}]({url})')
    bind('yp', 'yank pretty-url')
    bind('yt', 'yank title')
    bind('yy', 'yank')
    bind('{{', 'navigate prev -t')
    bind('}}', 'navigate next -t')

def createMode(name):
    global modes
    modes.append(name)

def createUserscript(file, command):
    # make sure auto script path exists
    if not os.path.exists(os.path.expanduser(f"{userscriptPath}/auto")):
        os.mkdir(f"{userscriptPath}/auto")
    filename = os.path.splitext(file)[0]
    # write the bash file that stats the file
    with open(f"{userscriptPath}/auto/{filename}", 'w') as F:
        F.write(f"""#!/bin/bash
                home="~"
                home=$(realpath -s "$home")
                home=$(echo "$home" | tr -d '~')
                projectPath=$(echo "$home qutePy/")
                projectPath=$(echo "$projectPath" | tr -d ' ')
                scriptPath=$(echo "$home {userscriptPath}/auto/{file}")
                scriptPath=$(echo "$scriptPath" | tr -d ' ')
                echo "$home"
                echo "$projectPath"

                mkdir "$projectPath"
                echo $QUTE_FIFO > "$projectPath/data.txt"

                python3 $scriptPath""")

    permissions = 0o775  # Octal permission value for making a file executable
    os.chmod(filename, permissions)
    # now create the python3 script
    with open(f"{userscriptPath}/auto{file}", 'w') as F:
        # F.write(whatever)
        pass

def enterMode(name):
    pass
